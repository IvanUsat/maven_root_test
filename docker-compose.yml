version: '3.8'
services:

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:15
    volumes:
      - ./inventory-service/docker/volumes/postgres-inventory/data:/var/lib/postgresql/data
    env_file:
      - ./inventory-service/docker/environments/.env
    ports:
      - "5432:5432"
    restart: always

  postgres-order:
    container_name: postgres-order
    image: postgres:15
    volumes:
      - ./order-service/docker/volumes/postgres-order/data:/var/lib/postgresql/data
    env_file:
      - ./order-service/docker/environments/.env
    ports:
      - "5433:5432"
    restart: always

  postgres-product:
    container_name: postgres-product
    image: postgres:15
    volumes:
      - ./product-service/docker/volumes/postgres-product/data:/var/lib/postgresql/data
    env_file:
      - ./product-service/docker/environments/.env
    ports:
      - "5431:5432"
    restart: always

  keycloakdb:
    container_name: postgresdb
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.3
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: root
    ports:
      - "8484:8080"
    volumes:
        - ./realms/:/opt/keycloak/data/import/
    command:
      ["start-dev", "--import-realm"]
    depends_on:
      - keycloakdb
    restart: always

  discovery-service:
    container_name: discovery-service
    build:
      context: discovery-service
      dockerfile: Dockerfile
    image: discovery-service:latest
    ports:
      - "8079:8079"
    restart: always

  gateway-service:
    container_name: gateway-service
    build:
      context: gateway-service
      dockerfile: Dockerfile
    image: gateway-service:latest
    environment:
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak:8080/realms/myclients
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8079/eureka
    ports:
      - "8086:8079"
    depends_on:
      - discovery-service
      - keycloak
    restart: always

  inventory-service:
    container_name: inventory-service
    build:
      context: inventory-service
      dockerfile: docker/Dockerfile
    image: inventory-service:latest
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8079/eureka
    ports:
      - "8089:8079"
    depends_on:
      - discovery-service
      - postgres-inventory
      - gateway-service
    restart: always

  order-service:
    container_name: order-service
    build:
      context: order-service
      dockerfile: docker/Dockerfile
    image: order-service:latest
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8079/eureka
    ports:
      - "8090:8079"
    depends_on:
      - discovery-service
      - postgres-order
      - gateway-service
    restart: always

  product-service:
    container_name: product-service
    build:
      context: product-service
      dockerfile: docker/Dockerfile
    image: product-service:latest
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5432/product-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8079/eureka
    ports:
      - "8088:8079"
    depends_on:
      - discovery-service
      - postgres-product
      - gateway-service
    restart: always